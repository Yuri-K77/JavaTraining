/* Виды пеобразования типов для примитивных типов переменных:
- автоматическое преобразование (неявное) - из меньшего значения в большее
- приведение типов (явное) - из большего значения в меньшее

Основные моменты:
1. если Вы "кладёте" в больший контейнер содержимое меньшего контейнера», преобразование происходит автоматически, и ошибок возникать не должно
2. если есть необходимость положить «значение из большего контейнера в меньший», нужно быть осторожным, и пользоваться явным приведением типов
3. при приведении float или double к целочисленным типам, дробная часть не округляется, а просто отбрасывается
4. тип boolean не приводится ни к одному из типов
5. тип char приводится к числовым типам, как код символа в системе UNICODE
6. если число больше своего контейнера, результат будет непредсказуемым
 */


package TransformTypes;

public class TransformTypes {
    public static void main(String[] args) {
        //Автоматическое преобразование типов компилятором (из меньшего значения в большее)
        byte a = 15;
        byte b = a;
        System.out.println("Преобразование одинаковых типов не производится: " + b);

        byte c = 15;
        int d = c;
        System.out.println("Преобразование от меньшего типа к большему: " + d);

        //Приведение типов (из большего значения в меньшее)
        long e = 20;
        byte f = (byte) e;
        System.out.println("Приведение от большего типа к меньшему: " + f);

        double g = 10.8;
        short h = (short) g;
        System.out.println("Приведение от большего дробного типа к меньшему: " + h);

        //Приведение типа char к числовым типам (приводится как код символа в системе UNICODE)
        char i = 'a';
        int k = (int) i;
        System.out.println("Приведение типа char к числовым типам: " + k);
    }
}
